"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Validator = require("ajv");
var imagemin = require("imagemin");
var loader_utils_1 = require("loader-utils");
var schema = require('../schema/options.json');
var validator = new Validator({ allErrors: true });
exports.raw = true;
function default_1(content) {
    var _a = loader_utils_1.getOptions(this) || {}, _b = _a.enabled, enabled = _b === void 0 ? true : _b, _c = _a.plugins, plugins = _c === void 0 ? [] : _c;
    /**
     * Validate options
     */
    if (!validator.validate(schema, { enabled: enabled, plugins: plugins })) {
        throw validator.errorsText(null, { dataVar: 'options' });
    }
    /**
     * If there is no options, then there is nothing to do here
     */
    if (enabled === false || !plugins.length) {
        return content;
    }
    plugins = plugins
        .map(function (_a) {
        var use = _a.use, options = _a.options;
        /**
         * If it's not enabled
         */
        if (options && options.enabled === false) {
            return false;
        }
        if (options)
            delete options.enabled;
        if (typeof use === 'string') {
            /**
             * Check if Plugin has been installed otherwise abort
             */
            try {
                return require(use)(options);
            }
            catch (e) {
                throw "You probably forgot to run \"npm install " + use + " --save-dev\"";
            }
        }
        return use(options);
    })
        .filter(Boolean);
    var callback = this.async();
    imagemin
        .buffer(content, { plugins: plugins })
        .then(function (buffer) { return callback(null, buffer); })
        .catch(function (err) { return callback(err); });
}
exports.default = default_1;
